var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
define(["require", "exports", 'horcrux-flux', './routestatic', './route'], function (require, exports, horcrux_flux_1, routestatic_1, route_1) {
    var Router = (function (_super) {
        __extends(Router, _super);
        function Router() {
            _super.call(this);
            //INSTANCE
            this.routes = [];
            this.views = [];
            this._onRouteComplete = function () { };
            Router._static.addRouter(this);
        }
        Router.prototype.addView = function (view) {
            var _this = this;
            this.views.push(view);
            Router._static.routing
                .then(function (_) {
                Router._static.route(window.location.hash.substring(1), false, _this, view.name);
            });
        };
        Router.prototype.removeView = function (view) {
            this.views.splice(this.views.indexOf(view), 1);
        };
        Router.prototype.config = function (routeConfig) {
            this.routes.push(new route_1.default(routeConfig));
        };
        Router.prototype.onRouteComplete = function (callback, self) {
            this._onRouteComplete = !!self ? callback.bind(self) : callback;
        };
        /*
        * finds a route and redirects if neccessary
        */
        Router.prototype.beforeRoute = function (url) {
            var route = this.findRoute(url);
            if (!!route && !!route.redirect)
                return Promise.reject(route.redirect);
            else
                return Promise.resolve('');
        };
        /**
         * iterates over all registered views and asks them to deactivate
         */
        Router.prototype.canDeactivate = function (url, viewName, args) {
            var route = this.findRoute(url);
            if (!route)
                return Promise.resolve('');
            return Promise.all(this.views
                .filter(function (view) {
                return !viewName || (view.name === viewName);
            })
                .map(function (view) {
                var newComponentSelector = route.getComponentSelector(view.name);
                if (newComponentSelector === "*")
                    return Promise.resolve('');
                else
                    return view.canDeavtivate(newComponentSelector, route.getArgs(url, args));
            }));
        };
        /**
         * iterates over all registered views and asks them to activate
         */
        Router.prototype.canActivate = function (url, viewName, args) {
            var route = this.findRoute(url);
            if (!route)
                return Promise.resolve('');
            return Promise.all(this.views
                .filter(function (view) {
                return !viewName || (view.name === viewName);
            })
                .map(function (view) {
                var newComponentSelector = route.getComponentSelector(view.name);
                if (newComponentSelector === "*")
                    return Promise.resolve('');
                else
                    return view.canAvtivate(newComponentSelector, route.getArgs(url, args));
            }));
        };
        /**
         * iterates over all registered views activate the new component
         */
        Router.prototype.activate = function (url, viewName, args) {
            var route = this.findRoute(url);
            if (!route)
                return void 0;
            this.views
                .filter(function (view) {
                return !viewName || (view.name === viewName);
            })
                .forEach(function (view) {
                var newComponentSelector = route.getComponentSelector(view.name);
                if (newComponentSelector !== "*")
                    view.activate(newComponentSelector, route.getArgs(url, args));
            });
            this._onRouteComplete(url, route.getArgs(url, args));
        };
        Router.prototype.findRoute = function (url) {
            for (var key in this.routes) {
                var route = this.routes[key];
                if (route.matches(url))
                    return route;
            }
            return void 0;
        };
        // STATIC
        Router._static = new routestatic_1.default();
        return Router;
    })(horcrux_flux_1.Store);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Router;
});

//# sourceMappingURL=data:application/json;base64,