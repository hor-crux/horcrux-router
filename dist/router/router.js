var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
define(["require", "exports", 'horcrux-flux', './routestatic', './route'], function (require, exports, horcrux_flux_1, routestatic_1, route_1) {
    var Router = (function (_super) {
        __extends(Router, _super);
        function Router() {
            _super.call(this);
            //INSTANCE
            this.routes = [];
            this.views = [];
            Router._static.addRouter(this);
        }
        Router.route = function (url) {
            return Router._static.route(url);
        };
        Router.prototype.addView = function (view) {
            this.views.push(view);
        };
        Router.prototype.removeView = function (view) {
            this.views.splice(this.views.indexOf(view), 1);
        };
        Router.prototype.config = function (routeConfig) {
            this.routes.push(new route_1.default(routeConfig));
        };
        /**
         * iterates over all registered views and asks them to deactivate
         */
        Router.prototype.canDeactivate = function (url) {
            var route = this.findRoute(url);
            if (!route)
                return Promise.resolve('');
            return Promise.all(this.views.map(function (view) {
                return view.canDeavtivate(route.component[view.name].selector, route.getArgs(url));
            }));
        };
        /**
         * iterates over all registered views and asks them to activate
         */
        Router.prototype.canActivate = function (url) {
            var route = this.findRoute(url);
            if (!route)
                return Promise.resolve('');
            return Promise.all(this.views.map(function (view) {
                return view.canAvtivate(route.component[view.name].selector, route.getArgs(url));
            }));
        };
        /**
         * iterates over all registered views activate the new component
         */
        Router.prototype.activate = function (url) {
            var route = this.findRoute(url);
            if (!route)
                return void 0;
            this.views.map(function (view) {
                return view.activate(route.component[view.name].selector, route.getArgs(url));
            });
        };
        Router.prototype.findRoute = function (url) {
            for (var key in this.routes) {
                var route = this.routes[key];
                if (route.matches(url))
                    return route;
            }
            return void 0;
        };
        // STATIC
        Router._static = new routestatic_1.default();
        return Router;
    })(horcrux_flux_1.Store);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Router;
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJvdXRlci9yb3V0ZXIudHMiXSwibmFtZXMiOlsiUm91dGVyIiwiUm91dGVyLmNvbnN0cnVjdG9yIiwiUm91dGVyLnJvdXRlIiwiUm91dGVyLmFkZFZpZXciLCJSb3V0ZXIucmVtb3ZlVmlldyIsIlJvdXRlci5jb25maWciLCJSb3V0ZXIuY2FuRGVhY3RpdmF0ZSIsIlJvdXRlci5jYW5BY3RpdmF0ZSIsIlJvdXRlci5hY3RpdmF0ZSIsIlJvdXRlci5maW5kUm91dGUiXSwibWFwcGluZ3MiOiI7Ozs7OztJQU9BO1FBQW9DQSwwQkFBWUE7UUFZL0NBO1lBQ0NDLGlCQUFPQSxDQUFDQTtZQUxUQSxVQUFVQTtZQUNBQSxXQUFNQSxHQUFpQkEsRUFBRUEsQ0FBQ0E7WUFDMUJBLFVBQUtBLEdBQWtCQSxFQUFFQSxDQUFDQTtZQUluQ0EsTUFBTUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsU0FBU0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFDaENBLENBQUNBO1FBWE1ELFlBQUtBLEdBQVpBLFVBQWFBLEdBQVVBO1lBQ3RCRSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxPQUFPQSxDQUFDQSxLQUFLQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUNsQ0EsQ0FBQ0E7UUFXTUYsd0JBQU9BLEdBQWRBLFVBQWVBLElBQVdBO1lBQ3pCRyxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUN2QkEsQ0FBQ0E7UUFFTUgsMkJBQVVBLEdBQWpCQSxVQUFrQkEsSUFBV0E7WUFDNUJJLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO1FBQ2hEQSxDQUFDQTtRQUVNSix1QkFBTUEsR0FBYkEsVUFBY0EsV0FBd0JBO1lBQ3JDSyxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFD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QUNBO1lBQ2ZBLENBQUNBO1lBRURBLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBLENBQUNBO1FBQ2ZBLENBQUNBO1FBOUVEVCxTQUFTQTtRQUNGQSxjQUFPQSxHQUFHQSxJQUFJQSxxQkFBV0EsRUFBRUEsQ0FBQ0E7UUE4RXBDQSxhQUFDQTtJQUFEQSxDQWpGQSxBQWlGQ0EsRUFqRm1DLG9CQUFLLEVBaUZ4QztJQWpGRDs0QkFpRkMsQ0FBQSIsImZpbGUiOiJyb3V0ZXIvcm91dGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtTdG9yZSwgaGFuZGxlfSBmcm9tICdob3JjcnV4LWZsdXgnXHJcbmltcG9ydCB7SVJvdXRlQ29uZmlnfSBmcm9tICcuL3JvdXRlY29uZmlnJ1xyXG5pbXBvcnQgUm91dGVTdGF0aWMgZnJvbSAnLi9yb3V0ZXN0YXRpYydcclxuaW1wb3J0IFJvdXRlIGZyb20gJy4vcm91dGUnO1xyXG5pbXBvcnQgUm91dGVBY3Rpb25zIGZyb20gJy4vYWN0aW9ucydcclxuaW1wb3J0IEhjVmlldyBmcm9tICcuLi92aWV3J1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUm91dGVyIGV4dGVuZHMgU3RvcmU8Um91dGU+IHtcclxuXHRcclxuXHQvLyBTVEFUSUNcclxuXHRzdGF0aWMgX3N0YXRpYyA9IG5ldyBSb3V0ZVN0YXRpYygpO1xyXG5cdHN0YXRpYyByb3V0ZSh1cmw6c3RyaW5nKTogdm9pZCB7XHJcblx0XHRyZXR1cm4gUm91dGVyLl9zdGF0aWMucm91dGUodXJsKTtcclxuXHR9XHJcblx0XHJcblx0Ly9JTlNUQU5DRVxyXG5cdHByb3RlY3RlZCByb3V0ZXM6IEFycmF5PFJvdXRlPiA9IFtdO1xyXG5cdHByb3RlY3RlZCB2aWV3czogQXJyYXk8SGNWaWV3PiA9IFtdO1xyXG5cdFxyXG5cdGNvbnN0cnVjdG9yKCkge1xyXG5cdFx0c3VwZXIoKTtcclxuXHRcdFJvdXRlci5fc3RhdGljLmFkZFJvdXRlcih0aGlzKTtcclxuXHR9XHJcblx0XHJcblx0cHVibGljIGFkZFZpZXcodmlldzpIY1ZpZXcpOiB2b2lkIHtcclxuXHRcdHRoaXMudmlld3MucHVzaCh2aWV3KTtcclxuXHR9XHJcblx0XHJcblx0cHVibGljIHJlbW92ZVZpZXcodmlldzpIY1ZpZXcpOiB2b2lkIHtcclxuXHRcdHRoaXMudmlld3Muc3BsaWNlKHRoaXMudmlld3MuaW5kZXhPZih2aWV3KSwgMSk7XHJcblx0fVxyXG5cdFxyXG5cdHB1YmxpYyBjb25maWcocm91dGVDb25maWc6SVJvdXRlQ29uZmlnKTogdm9pZCB7XHJcblx0XHR0aGlzLnJvdXRlcy5wdXNoKG5ldyBSb3V0ZShyb3V0ZUNvbmZpZykpO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBpdGVyYXRlcyBvdmVyIGFsbCByZWdpc3RlcmVkIHZpZXdzIGFuZCBhc2tzIHRoZW0gdG8gZGVhY3RpdmF0ZVxyXG5cdCAqL1xyXG5cdHB1YmxpYyBjYW5EZWFjdGl2YXRlKHVybDpzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG5cdFx0bGV0IHJvdXRlID0gdGhpcy5maW5kUm91dGUodXJsKTtcclxuXHRcdGlmKCFyb3V0ZSlcclxuXHRcdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSgnJylcclxuXHRcdFx0XHJcblx0XHRyZXR1cm4gUHJvbWlzZS5hbGwoXHJcblx0XHRcdHRoaXMudmlld3MubWFwKHZpZXcgPT4ge1xyXG5cdFx0XHRcdHJldHVybiB2aWV3LmNhbkRlYXZ0aXZhdGUoKDxhbnk+cm91dGUuY29tcG9uZW50W3ZpZXcubmFtZV0pLnNlbGVjdG9yLCByb3V0ZS5nZXRBcmdzKHVybCkpXHJcblx0XHRcdH0pXHJcblx0XHQpO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBpdGVyYXRlcyBvdmVyIGFsbCByZWdpc3RlcmVkIHZpZXdzIGFuZCBhc2tzIHRoZW0gdG8gYWN0aXZhdGVcclxuXHQgKi9cclxuXHRwdWJsaWMgY2FuQWN0aXZhdGUodXJsOnN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcblx0XHRsZXQgcm91dGUgPSB0aGlzLmZpbmRSb3V0ZSh1cmwpO1xyXG5cdFx0aWYoIXJvdXRlKVxyXG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCcnKVxyXG5cdFx0XHRcclxuXHRcdHJldHVybiBQcm9taXNlLmFsbChcclxuXHRcdFx0dGhpcy52aWV3cy5tYXAodmlldyA9PiB7XHJcblx0XHRcdFx0cmV0dXJuIHZpZXcuY2FuQXZ0aXZhdGUoKDxhbnk+cm91dGUuY29tcG9uZW50W3ZpZXcubmFtZV0pLnNlbGVjdG9yLCByb3V0ZS5nZXRBcmdzKHVybCkpO1xyXG5cdFx0XHR9KVxyXG5cdFx0KTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogaXRlcmF0ZXMgb3ZlciBhbGwgcmVnaXN0ZXJlZCB2aWV3cyBhY3RpdmF0ZSB0aGUgbmV3IGNvbXBvbmVudFxyXG5cdCAqL1xyXG5cdHB1YmxpYyBhY3RpdmF0ZSh1cmw6c3RyaW5nKTogdm9pZCB7XHJcblx0XHRsZXQgcm91dGUgPSB0aGlzLmZpbmRSb3V0ZSh1cmwpO1xyXG5cdFx0aWYoIXJvdXRlKVxyXG5cdFx0XHRyZXR1cm4gdm9pZCAwO1xyXG5cdFx0XHRcclxuXHRcdHRoaXMudmlld3MubWFwKHZpZXcgPT4ge1xyXG5cdFx0XHRyZXR1cm4gdmlldy5hY3RpdmF0ZSgoPGFueT5yb3V0ZS5jb21wb25lbnRbdmlldy5uYW1lXSkuc2VsZWN0b3IsIHJvdXRlLmdldEFyZ3ModXJsKSk7XHJcblx0XHR9KVxyXG5cdH1cclxuXHRcclxuXHRwcm90ZWN0ZWQgZmluZFJvdXRlKHVybDpzdHJpbmcpOiBSb3V0ZSB7XHJcblx0XHRmb3IobGV0IGtleSBpbiB0aGlzLnJvdXRlcykge1xyXG5cdFx0XHRsZXQgcm91dGUgPSB0aGlzLnJvdXRlc1trZXldO1xyXG5cdFx0XHRpZihyb3V0ZS5tYXRjaGVzKHVybCkpXHJcblx0XHRcdFx0cmV0dXJuIHJvdXRlO1xyXG5cdFx0fVxyXG5cdFx0XHJcblx0XHRyZXR1cm4gdm9pZCAwO1xyXG5cdH1cclxufSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==