define(["require", "exports"], function (require, exports) {
    var RouteStatic = (function () {
        function RouteStatic() {
            this.routers = [];
            window.onhashchange = this.onHashchange.bind(this);
            this.onHashchange(undefined);
        }
        RouteStatic.prototype.addRouter = function (router) {
            this.routers.push(router);
        };
        RouteStatic.prototype.removeRouter = function (router) {
            this.routers.splice(this.routers.indexOf(router), 1);
        };
        RouteStatic.prototype.route = function (url) {
            var _this = this;
            Promise.resolve('')
                .then(function (_) {
                return _this.canDeactivate(url);
            })
                .then(function (_) {
                return _this.canActivate(url);
            })
                .then(function (_) {
                return _this.activate(url);
            })
                .then(function (_) {
                _this.setUrl(url);
            });
        };
        RouteStatic.prototype.canDeactivate = function (url) {
            // iterate over all registered router and ask them if they can deactivate
            return Promise.all(this.routers.map(function (router) { return router.canDeactivate(url); }));
        };
        RouteStatic.prototype.canActivate = function (url) {
            // iterate over all registered router and ask them if they can activate
            return Promise.all(this.routers.map(function (router) { return router.canActivate(url); }));
        };
        RouteStatic.prototype.activate = function (url) {
            this.routers.forEach(function (router) {
                router.activate(url);
            });
        };
        RouteStatic.prototype.onHashchange = function (event) {
            this.route(window.location.hash.substring(1));
        };
        RouteStatic.prototype.setUrl = function (url) {
            window.onhashchange = void 0;
            window.location.hash = url;
            window.onhashchange = this.onHashchange.bind(this);
        };
        return RouteStatic;
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = RouteStatic;
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJvdXRlci9yb3V0ZXN0YXRpYy50cyJdLCJuYW1lcyI6WyJSb3V0ZVN0YXRpYyIsIlJvdXRlU3RhdGljLmNvbnN0cnVjdG9yIiwiUm91dGVTdGF0aWMuYWRkUm91dGVyIiwiUm91dGVTdGF0aWMucmVtb3ZlUm91dGVyIiwiUm91dGVTdGF0aWMucm91dGUiLCJSb3V0ZVN0YXRpYy5jYW5EZWFjdGl2YXRlIiwiUm91dGVTdGF0aWMuY2FuQWN0aXZhdGUiLCJSb3V0ZVN0YXRpYy5hY3RpdmF0ZSIsIlJvdXRlU3RhdGljLm9uSGFzaGNoYW5nZSIsIlJvdXRlU3RhdGljLnNldFVybCJdLCJtYXBwaW5ncyI6IjtJQUVBO1FBR0NBO1lBRlFDLFlBQU9BLEdBQWtCQSxFQUFFQSxDQUFDQTtZQUduQ0EsTUFBTUEsQ0FBQ0EsWUFBWUEsR0FBR0EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7WUFDbkRBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBO1FBQzlCQSxDQUFDQTtRQUVNRCwrQkFBU0EsR0FBaEJBLFVBQWlCQSxNQUFhQTtZQUM3QkUsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7UUFDM0JBLENBQUNBO1FBRU1GLGtDQUFZQSxHQUFuQkEsVUFBb0JBLE1BQWFBO1lBQ2hDRyxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxPQUFPQSxDQUFDQSxNQUFNQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUN0REEsQ0FBQ0E7UUFFTUgsMkJBQUtBLEdBQVpBLFVBQWFBLEdBQVVBO1lBQXZCSSxpQkFjQ0E7WUFiQUEsT0FBT0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsRUFBRUEsQ0FBQ0E7aUJBQ2xCQSxJQUFJQSxDQUFDQSxVQUFBQSxDQUFDQTtnQkFDTkEsTUFBTUEsQ0FBQ0EsS0FBSUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQUE7WUFDL0JBLENBQUNBLENBQUNBO2lCQUNEQSxJQUFJQSxDQUFDQSxVQUFBQSxDQUFDQTtnQkFDTkEsTUFBTUEsQ0FBQ0EsS0FBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDOUJBLENBQUNBLENBQUNBO2lCQUNEQSxJQUFJQSxDQUFDQSxVQUFBQSxDQUFDQTtnQkFDTkEsTUFBTUEsQ0FBQ0EsS0FBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDM0JBLENBQUNBLENBQUNBO2lCQUNEQSxJQUFJQSxDQUFDQSxVQUFBQSxDQUFDQTtnQkFDTkEsS0FBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDbEJBLENBQUNBLENBQUNBLENBQUFBO1FBQ0hBLENBQUNBO1FBRU1KLG1DQUFhQSxHQUFwQkEsVUFBcUJBLEdBQVVBO1lBQzlCSyx5RUFBeUVBO1lBQ3pFQSxNQUFNQSxDQUFDQSxPQUFPQSxDQUFDQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxHQUFHQSxDQUFDQSxVQUFBQSxNQUFNQSxJQUFLQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxhQUFhQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFBQSxDQUFBQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFBQTtRQUNuRkEsQ0FBQ0E7UUFFTUwsaUNBQVdBLEdBQWxCQSxVQUFtQkEsR0FBVUE7WUFDNUJNLHVFQUF1RUE7WUFDdkVBLE1BQU1BLENBQUNBLE9BQU9BLENBQUNBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLEdBQUdBLENBQUNBLFVBQUFBLE1BQU1BLElBQUtBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBLFdBQVdBLENBQUNBLEdBQUdBLENBQUNBLENBQUFBLENBQUFBLENBQUNBLENBQUNBLENBQUNBLENBQUFBO1FBQ2pGQSxDQUFDQTtRQUVNTiw4QkFBUUEsR0FBZkEsVUFBZ0JBLEdBQVVBO1lBQ3pCTyxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxPQUFPQSxDQUFDQSxVQUFBQSxNQUFNQTtnQkFDMUJBLE1BQU1BLENBQUNBLFFBQVFBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBQ3RCQSxDQUFDQSxDQUFDQSxDQUFBQTtRQUNIQSxDQUFDQTtRQUVPUCxrQ0FBWUEsR0FBcEJBLFVBQXFCQSxLQUFxQkE7WUFDekNRLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLE1BQU1BLENBQUNBLFFBQVFBLENBQUNBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBQy9DQSxDQUFDQTtRQUVPUiw0QkFBTUEsR0FBZEEsVUFBZUEsR0FBVUE7WUFDeEJTLE1BQU1BLENBQUNBLFlBQVlBLEdBQUdBLEtBQUtBLENBQUNBLENBQUNBO1lBQzdCQSxNQUFNQSxDQUFDQSxRQUFRQSxDQUFDQSxJQUFJQSxHQUFHQSxHQUFHQSxDQUFDQTtZQUMzQkEsTUFBTUEsQ0FBQ0EsWUFBWUEsR0FBR0EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFDcERBLENBQUNBO1FBQ0ZULGtCQUFDQTtJQUFEQSxDQXpEQSxBQXlEQ0EsSUFBQTtJQXpERDtpQ0F5REMsQ0FBQSIsImZpbGUiOiJyb3V0ZXIvcm91dGVzdGF0aWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUm91dGVyIGZyb20gJy4vcm91dGVyJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUm91dGVTdGF0aWMge1xyXG5cdHByaXZhdGUgcm91dGVyczogQXJyYXk8Um91dGVyPiA9IFtdO1xyXG5cdFxyXG5cdGNvbnN0cnVjdG9yKCkge1xyXG5cdFx0d2luZG93Lm9uaGFzaGNoYW5nZSA9IHRoaXMub25IYXNoY2hhbmdlLmJpbmQodGhpcyk7XHJcblx0XHR0aGlzLm9uSGFzaGNoYW5nZSh1bmRlZmluZWQpO1xyXG5cdH1cclxuXHRcclxuXHRwdWJsaWMgYWRkUm91dGVyKHJvdXRlcjpSb3V0ZXIpOiB2b2lkIHtcclxuXHRcdHRoaXMucm91dGVycy5wdXNoKHJvdXRlcik7XHJcblx0fVxyXG5cdFxyXG5cdHB1YmxpYyByZW1vdmVSb3V0ZXIocm91dGVyOlJvdXRlcik6IHZvaWQge1xyXG5cdFx0dGhpcy5yb3V0ZXJzLnNwbGljZSh0aGlzLnJvdXRlcnMuaW5kZXhPZihyb3V0ZXIpLCAxKTtcclxuXHR9XHJcblx0XHJcblx0cHVibGljIHJvdXRlKHVybDpzdHJpbmcpOiB2b2lkIHtcclxuXHRcdFByb21pc2UucmVzb2x2ZSgnJylcclxuXHRcdC50aGVuKF89PntcclxuXHRcdFx0cmV0dXJuIHRoaXMuY2FuRGVhY3RpdmF0ZSh1cmwpXHJcblx0XHR9KVxyXG5cdFx0LnRoZW4oXz0+IHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuY2FuQWN0aXZhdGUodXJsKTtcclxuXHRcdH0pXHJcblx0XHQudGhlbihfPT57XHJcblx0XHRcdHJldHVybiB0aGlzLmFjdGl2YXRlKHVybCk7XHJcblx0XHR9KVxyXG5cdFx0LnRoZW4oXz0+e1xyXG5cdFx0XHR0aGlzLnNldFVybCh1cmwpO1xyXG5cdFx0fSlcclxuXHR9XHJcblx0XHJcblx0cHVibGljIGNhbkRlYWN0aXZhdGUodXJsOnN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcblx0XHQvLyBpdGVyYXRlIG92ZXIgYWxsIHJlZ2lzdGVyZWQgcm91dGVyIGFuZCBhc2sgdGhlbSBpZiB0aGV5IGNhbiBkZWFjdGl2YXRlXHJcblx0XHRyZXR1cm4gUHJvbWlzZS5hbGwodGhpcy5yb3V0ZXJzLm1hcChyb3V0ZXIgPT4ge3JldHVybiByb3V0ZXIuY2FuRGVhY3RpdmF0ZSh1cmwpfSkpXHJcblx0fVxyXG5cdFxyXG5cdHB1YmxpYyBjYW5BY3RpdmF0ZSh1cmw6c3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuXHRcdC8vIGl0ZXJhdGUgb3ZlciBhbGwgcmVnaXN0ZXJlZCByb3V0ZXIgYW5kIGFzayB0aGVtIGlmIHRoZXkgY2FuIGFjdGl2YXRlXHJcblx0XHRyZXR1cm4gUHJvbWlzZS5hbGwodGhpcy5yb3V0ZXJzLm1hcChyb3V0ZXIgPT4ge3JldHVybiByb3V0ZXIuY2FuQWN0aXZhdGUodXJsKX0pKVxyXG5cdH1cclxuXHRcclxuXHRwdWJsaWMgYWN0aXZhdGUodXJsOnN0cmluZyk6IHZvaWQge1xyXG5cdFx0dGhpcy5yb3V0ZXJzLmZvckVhY2gocm91dGVyID0+IHtcclxuXHRcdFx0cm91dGVyLmFjdGl2YXRlKHVybCk7XHJcblx0XHR9KVxyXG5cdH1cclxuXHRcclxuXHRwcml2YXRlIG9uSGFzaGNoYW5nZShldmVudDpIYXNoQ2hhbmdlRXZlbnQpOiB2b2lkIHtcclxuXHRcdHRoaXMucm91dGUod2luZG93LmxvY2F0aW9uLmhhc2guc3Vic3RyaW5nKDEpKTtcclxuXHR9XHJcblx0XHJcblx0cHJpdmF0ZSBzZXRVcmwodXJsOnN0cmluZyk6IHZvaWQge1xyXG5cdFx0d2luZG93Lm9uaGFzaGNoYW5nZSA9IHZvaWQgMDtcclxuXHRcdHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gdXJsO1xyXG5cdFx0d2luZG93Lm9uaGFzaGNoYW5nZSA9IHRoaXMub25IYXNoY2hhbmdlLmJpbmQodGhpcyk7XHJcblx0fVxyXG59Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9