define(["require", "exports"], function (require, exports) {
    var RouteStatic = (function () {
        function RouteStatic() {
            this.routers = [];
            window.onhashchange = this.onHashchange.bind(this);
        }
        RouteStatic.prototype.addRouter = function (router) {
            this.routers.push(router);
        };
        RouteStatic.prototype.removeRouter = function (router) {
            this.routers.splice(this.routers.indexOf(router), 1);
        };
        RouteStatic.prototype.route = function (url) {
            var _this = this;
            Promise.resolve('')
                .then(function (_) {
                return _this.canDeactivate(url);
            })
                .then(function (_) {
                return _this.canActivate(url);
            })
                .then(function (_) {
                return _this.activate(url);
            })
                .then(function (_) {
                _this.setUrl(url);
            });
        };
        RouteStatic.prototype.canDeactivate = function (url) {
            // iterate over all registered router and ask them if they can deactivate
            return Promise.all(this.routers.map(function (router) { return router.canDeactivate(url); }));
        };
        RouteStatic.prototype.canActivate = function (url) {
            // iterate over all registered router and ask them if they can activate
            return Promise.all(this.routers.map(function (router) { return router.canActivate(url); }));
        };
        RouteStatic.prototype.activate = function (url) {
            this.routers.forEach(function (router) {
                router.activate(url);
            });
        };
        RouteStatic.prototype.onHashchange = function (event) {
            this.route(window.location.hash.substring(1));
        };
        RouteStatic.prototype.setUrl = function (url) {
            window.onhashchange = void 0;
            window.location.hash = url;
            window.onhashchange = this.onHashchange.bind(this);
        };
        return RouteStatic;
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = RouteStatic;
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJvdXRlci9yb3V0ZXN0YXRpYy50cyJdLCJuYW1lcyI6WyJSb3V0ZVN0YXRpYyIsIlJvdXRlU3RhdGljLmNvbnN0cnVjdG9yIiwiUm91dGVTdGF0aWMuYWRkUm91dGVyIiwiUm91dGVTdGF0aWMucmVtb3ZlUm91dGVyIiwiUm91dGVTdGF0aWMucm91dGUiLCJSb3V0ZVN0YXRpYy5jYW5EZWFjdGl2YXRlIiwiUm91dGVTdGF0aWMuY2FuQWN0aXZhdGUiLCJSb3V0ZVN0YXRpYy5hY3RpdmF0ZSIsIlJvdXRlU3RhdGljLm9uSGFzaGNoYW5nZSIsIlJvdXRlU3RhdGljLnNldFVybCJdLCJtYXBwaW5ncyI6IjtJQUVBO1FBR0NBO1lBRlFDLFlBQU9BLEdBQWtCQSxFQUFFQSxDQUFDQTtZQUduQ0EsTUFBTUEsQ0FBQ0EsWUFBWUEsR0FBR0EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFDcERBLENBQUNBO1FBRU1ELCtCQUFTQSxHQUFoQkEsVUFBaUJBLE1BQWFBO1lBQzdCRSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtRQUMzQkEsQ0FBQ0E7UUFFTUYsa0NBQVlBLEdBQW5CQSxVQUFvQkEsTUFBYUE7WUFDaENHLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLE1BQU1BLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO1FBQ3REQSxDQUFDQTtRQUVNSCwyQkFBS0EsR0FBWkEsVUFBYUEsR0FBVUE7WUFBdkJJLGlCQWNDQTtZQWJBQSxPQUFPQSxDQUFDQSxPQUFPQSxDQUFDQSxFQUFFQSxDQUFDQTtpQkFDbEJBLElBQUlBLENBQUNBLFVBQUFBLENBQUNBO2dCQUNOQSxNQUFNQSxDQUFDQSxLQUFJQSxDQUFDQSxhQUFhQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFBQTtZQUMvQkEsQ0FBQ0EsQ0FBQ0E7aUJBQ0RBLElBQUlBLENBQUNBLFVBQUFBLENBQUNBO2dCQUNOQSxNQUFNQSxDQUFDQSxLQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUM5QkEsQ0FBQ0EsQ0FBQ0E7aUJBQ0RBLElBQUlBLENBQUNBLFVBQUFBLENBQUNBO2dCQUNOQSxNQUFNQSxDQUFDQSxLQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUMzQkEsQ0FBQ0EsQ0FBQ0E7aUJBQ0RBLElBQUlBLENBQUNBLFVBQUFBLENBQUNBO2dCQUNOQSxLQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUNsQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQUE7UUFDSEEsQ0FBQ0E7UUFFTUosbUNBQWFBLEdBQXBCQSxVQUFxQkEsR0FBVUE7WUFDOUJLLHlFQUF5RUE7WUFDekVBLE1BQU1BLENBQUNBLE9BQU9BLENBQUNBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLEdBQUdBLENBQUNBLFVBQUFBLE1BQU1BLElBQUtBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBLGFBQWFBLENBQUNBLEdBQUdBLENBQUNBLENBQUFBLENBQUFBLENBQUNBLENBQUNBLENBQUNBLENBQUFBO1FBQ25GQSxDQUFDQTtRQUVNTCxpQ0FBV0EsR0FBbEJBLFVBQW1CQSxHQUFVQTtZQUM1Qk0sdUVBQXVFQTtZQUN2RUEsTUFBTUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsVUFBQUEsTUFBTUEsSUFBS0EsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQUEsQ0FBQUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQUE7UUFDakZBLENBQUNBO1FBRU1OLDhCQUFRQSxHQUFmQSxVQUFnQkEsR0FBVUE7WUFDekJPLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLFVBQUFBLE1BQU1BO2dCQUMxQkEsTUFBTUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDdEJBLENBQUNBLENBQUNBLENBQUFBO1FBQ0hBLENBQUNBO1FBRU9QLGtDQUFZQSxHQUFwQkEsVUFBcUJBLEtBQXFCQTtZQUN6Q1EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDL0NBLENBQUNBO1FBRU9SLDRCQUFNQSxHQUFkQSxVQUFlQSxHQUFVQTtZQUN4QlMsTUFBTUEsQ0FBQ0EsWUFBWUEsR0FBR0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7WUFDN0JBLE1BQU1BLENBQUNBLFFBQVFBLENBQUNBLElBQUlBLEdBQUdBLEdBQUdBLENBQUNBO1lBQzNCQSxNQUFNQSxDQUFDQSxZQUFZQSxHQUFHQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUNwREEsQ0FBQ0E7UUFDRlQsa0JBQUNBO0lBQURBLENBeERBLEFBd0RDQSxJQUFBO0lBeEREO2lDQXdEQyxDQUFBIiwiZmlsZSI6InJvdXRlci9yb3V0ZXN0YXRpYy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSb3V0ZXIgZnJvbSAnLi9yb3V0ZXInXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSb3V0ZVN0YXRpYyB7XHJcblx0cHJpdmF0ZSByb3V0ZXJzOiBBcnJheTxSb3V0ZXI+ID0gW107XHJcblx0XHJcblx0Y29uc3RydWN0b3IoKSB7XHJcblx0XHR3aW5kb3cub25oYXNoY2hhbmdlID0gdGhpcy5vbkhhc2hjaGFuZ2UuYmluZCh0aGlzKTtcclxuXHR9XHJcblx0XHJcblx0cHVibGljIGFkZFJvdXRlcihyb3V0ZXI6Um91dGVyKTogdm9pZCB7XHJcblx0XHR0aGlzLnJvdXRlcnMucHVzaChyb3V0ZXIpO1xyXG5cdH1cclxuXHRcclxuXHRwdWJsaWMgcmVtb3ZlUm91dGVyKHJvdXRlcjpSb3V0ZXIpOiB2b2lkIHtcclxuXHRcdHRoaXMucm91dGVycy5zcGxpY2UodGhpcy5yb3V0ZXJzLmluZGV4T2Yocm91dGVyKSwgMSk7XHJcblx0fVxyXG5cdFxyXG5cdHB1YmxpYyByb3V0ZSh1cmw6c3RyaW5nKTogdm9pZCB7XHJcblx0XHRQcm9taXNlLnJlc29sdmUoJycpXHJcblx0XHQudGhlbihfPT57XHJcblx0XHRcdHJldHVybiB0aGlzLmNhbkRlYWN0aXZhdGUodXJsKVxyXG5cdFx0fSlcclxuXHRcdC50aGVuKF89PiB7XHJcblx0XHRcdHJldHVybiB0aGlzLmNhbkFjdGl2YXRlKHVybCk7XHJcblx0XHR9KVxyXG5cdFx0LnRoZW4oXz0+e1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5hY3RpdmF0ZSh1cmwpO1xyXG5cdFx0fSlcclxuXHRcdC50aGVuKF89PntcclxuXHRcdFx0dGhpcy5zZXRVcmwodXJsKTtcclxuXHRcdH0pXHJcblx0fVxyXG5cdFxyXG5cdHB1YmxpYyBjYW5EZWFjdGl2YXRlKHVybDpzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG5cdFx0Ly8gaXRlcmF0ZSBvdmVyIGFsbCByZWdpc3RlcmVkIHJvdXRlciBhbmQgYXNrIHRoZW0gaWYgdGhleSBjYW4gZGVhY3RpdmF0ZVxyXG5cdFx0cmV0dXJuIFByb21pc2UuYWxsKHRoaXMucm91dGVycy5tYXAocm91dGVyID0+IHtyZXR1cm4gcm91dGVyLmNhbkRlYWN0aXZhdGUodXJsKX0pKVxyXG5cdH1cclxuXHRcclxuXHRwdWJsaWMgY2FuQWN0aXZhdGUodXJsOnN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcblx0XHQvLyBpdGVyYXRlIG92ZXIgYWxsIHJlZ2lzdGVyZWQgcm91dGVyIGFuZCBhc2sgdGhlbSBpZiB0aGV5IGNhbiBhY3RpdmF0ZVxyXG5cdFx0cmV0dXJuIFByb21pc2UuYWxsKHRoaXMucm91dGVycy5tYXAocm91dGVyID0+IHtyZXR1cm4gcm91dGVyLmNhbkFjdGl2YXRlKHVybCl9KSlcclxuXHR9XHJcblx0XHJcblx0cHVibGljIGFjdGl2YXRlKHVybDpzdHJpbmcpOiB2b2lkIHtcclxuXHRcdHRoaXMucm91dGVycy5mb3JFYWNoKHJvdXRlciA9PiB7XHJcblx0XHRcdHJvdXRlci5hY3RpdmF0ZSh1cmwpO1xyXG5cdFx0fSlcclxuXHR9XHJcblx0XHJcblx0cHJpdmF0ZSBvbkhhc2hjaGFuZ2UoZXZlbnQ6SGFzaENoYW5nZUV2ZW50KTogdm9pZCB7XHJcblx0XHR0aGlzLnJvdXRlKHdpbmRvdy5sb2NhdGlvbi5oYXNoLnN1YnN0cmluZygxKSk7XHJcblx0fVxyXG5cdFxyXG5cdHByaXZhdGUgc2V0VXJsKHVybDpzdHJpbmcpOiB2b2lkIHtcclxuXHRcdHdpbmRvdy5vbmhhc2hjaGFuZ2UgPSB2b2lkIDA7XHJcblx0XHR3aW5kb3cubG9jYXRpb24uaGFzaCA9IHVybDtcclxuXHRcdHdpbmRvdy5vbmhhc2hjaGFuZ2UgPSB0aGlzLm9uSGFzaGNoYW5nZS5iaW5kKHRoaXMpO1xyXG5cdH1cclxufSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==