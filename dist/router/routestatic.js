define(["require", "exports"], function (require, exports) {
    var RouteStatic = (function () {
        function RouteStatic() {
            this.routers = [];
            this.history = [];
            this.routing = Promise.resolve('');
            window.onhashchange = this.onHashchange.bind(this);
            this.onHashchange(undefined);
        }
        RouteStatic.prototype.addRouter = function (router) {
            var _this = this;
            (this.routing || Promise.resolve('')).then(function (_) {
                _this.routers.push(router);
            });
        };
        RouteStatic.prototype.removeRouter = function (router) {
            this.routers.splice(this.routers.indexOf(router), 1);
        };
        RouteStatic.prototype.route = function (url, extern, router, viewName) {
            var _this = this;
            var end_routing;
            return this.routing
                .then(function (_) {
                _this.routing = new Promise(function (resolve, reject) {
                    end_routing = resolve;
                });
            })
                .then(function (_) {
                return _this.beforeRoute(url, router, viewName);
            })
                .then(function (_) {
                return _this.canDeactivate(url, router, viewName);
            }, function (url) {
                end_routing();
                _this.route(url, extern, router, viewName);
            })
                .then(function (_) {
                return _this.canActivate(url, router, viewName);
            })
                .then(function (_) {
                return _this.activate(url, router, viewName);
            })
                .then(function (_) {
                _this.setUrl(url);
                end_routing();
            })
                .catch(function (url) {
                if (!!extern)
                    _this.goBack();
                end_routing();
            });
        };
        RouteStatic.prototype.beforeRoute = function (url, router, viewName) {
            if (!!router)
                return router.beforeRoute(url);
            else
                return Promise.all(this.routers.map(function (router) { return router.beforeRoute(url); }));
        };
        RouteStatic.prototype.canDeactivate = function (url, router, viewName) {
            if (!!router)
                return router.canDeactivate(url, viewName);
            else
                return Promise.all(this.routers.map(function (router) { return router.canDeactivate(url, viewName); }));
        };
        RouteStatic.prototype.canActivate = function (url, router, viewName) {
            if (!!router)
                return router.canActivate(url, viewName);
            else
                return Promise.all(this.routers.map(function (router) { return router.canActivate(url, viewName); }));
        };
        RouteStatic.prototype.activate = function (url, router, viewName) {
            if (!!router)
                router.activate(url, viewName);
            else
                this.routers.forEach(function (router) {
                    router.activate(url, viewName);
                });
        };
        RouteStatic.prototype.onHashchange = function (event) {
            var hash = window.location.hash.length === 0 ? '' : window.location.hash.substring(1);
            if (!!event && (event.newURL.match(/#(.*)/) || [])[1] === hash)
                return;
            this.route(hash, true);
        };
        RouteStatic.prototype.setUrl = function (url) {
            window.onhashchange = void 0;
            window.location.hash = url;
            window.onhashchange = this.onHashchange.bind(this);
            this.history.push(url);
        };
        RouteStatic.prototype.goBack = function () {
            this.setUrl(this.history.pop() || '');
        };
        return RouteStatic;
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = RouteStatic;
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJvdXRlci9yb3V0ZXN0YXRpYy50cyJdLCJuYW1lcyI6WyJSb3V0ZVN0YXRpYyIsIlJvdXRlU3RhdGljLmNvbnN0cnVjdG9yIiwiUm91dGVTdGF0aWMuYWRkUm91dGVyIiwiUm91dGVTdGF0aWMucmVtb3ZlUm91dGVyIiwiUm91dGVTdGF0aWMucm91dGUiLCJSb3V0ZVN0YXRpYy5iZWZvcmVSb3V0ZSIsIlJvdXRlU3RhdGljLmNhbkRlYWN0aXZhdGUiLCJSb3V0ZVN0YXRpYy5jYW5BY3RpdmF0ZSIsIlJvdXRlU3RhdGljLmFjdGl2YXRlIiwiUm91dGVTdGF0aWMub25IYXNoY2hhbmdlIiwiUm91dGVTdGF0aWMuc2V0VXJsIiwiUm91dGVTdGF0aWMuZ29CYWNrIl0sIm1hcHBpbmdzIjoiO0lBRUE7UUFNQ0E7WUFKUUMsWUFBT0EsR0FBa0JBLEVBQUVBLENBQUNBO1lBQzVCQSxZQUFPQSxHQUFrQkEsRUFBRUEsQ0FBQ0E7WUFDNUJBLFlBQU9BLEdBQWlCQSxPQUFPQSxDQUFDQSxPQUFPQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQTtZQUduREEsTUFBTUEsQ0FBQ0EsWUFBWUEsR0FBR0EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7WUFDbkRBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBO1FBQzlCQSxDQUFDQTtRQUVNRCwrQkFBU0EsR0FBaEJBLFVBQWlCQSxNQUFhQTtZQUE5QkUsaUJBSUNBO1lBSEFBLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLElBQUlBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLFVBQUFBLENBQUNBO2dCQUMzQ0EsS0FBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7WUFDM0JBLENBQUNBLENBQUNBLENBQUFBO1FBQ0hBLENBQUNBO1FBRU1GLGtDQUFZQSxHQUFuQkEsVUFBb0JBLE1BQWFBO1lBQ2hDRyxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxPQUFPQSxDQUFDQSxNQUFNQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUN0REEsQ0FBQ0E7UUFFTUgsMkJBQUtBLEdBQVpBLFVBQWFBLEdBQVVBLEVBQUVBLE1BQWNBLEVBQUVBLE1BQWNBLEVBQUVBLFFBQWdCQTtZQUF6RUksaUJBbUNDQTtZQWpDQUEsSUFBSUEsV0FBcUJBLENBQUNBO1lBRTFCQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQTtpQkFDbEJBLElBQUlBLENBQUNBLFVBQUFBLENBQUNBO2dCQUNOQSxLQUFJQSxDQUFDQSxPQUFPQSxHQUFHQSxJQUFJQSxPQUFPQSxDQUFDQSxVQUFDQSxPQUFPQSxFQUFFQSxNQUFNQTtvQkFDMUNBLFdBQVdBLEdBQUdBLE9BQU9BLENBQUNBO2dCQUN2QkEsQ0FBQ0EsQ0FBQ0EsQ0FBQUE7WUFDSEEsQ0FBQ0EsQ0FBQ0E7aUJBQ0RBLElBQUlBLENBQUNBLFVBQUFBLENBQUNBO2dCQUNOQSxNQUFNQSxDQUFDQSxLQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxHQUFHQSxFQUFFQSxNQUFNQSxFQUFFQSxRQUFRQSxDQUFDQSxDQUFBQTtZQUMvQ0EsQ0FBQ0EsQ0FBQ0E7aUJBQ0RBLElBQUlBLENBQUNBLFVBQUFBLENBQUNBO2dCQUNOQSxNQUFNQSxDQUFDQSxLQUFJQSxDQUFDQSxhQUFhQSxDQUFDQSxHQUFHQSxFQUFFQSxNQUFNQSxFQUFFQSxRQUFRQSxDQUFDQSxDQUFBQTtZQUNqREEsQ0FBQ0EsRUFDQUEsVUFBQUEsR0FBR0E7Z0JBQ0hBLFdBQVdBLEVBQUVBLENBQUNBO2dCQUNkQSxLQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxHQUFHQSxFQUFFQSxNQUFNQSxFQUFFQSxNQUFNQSxFQUFFQSxRQUFRQSxDQUFDQSxDQUFDQTtZQUMzQ0EsQ0FBQ0EsQ0FBQ0E7aUJBQ0RBLElBQUlBLENBQUNBLFVBQUFBLENBQUNBO2dCQUNOQSxNQUFNQSxDQUFDQSxLQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxHQUFHQSxFQUFFQSxNQUFNQSxFQUFFQSxRQUFRQSxDQUFDQSxDQUFDQTtZQUNoREEsQ0FBQ0EsQ0FBQ0E7aUJBQ0RBLElBQUlBLENBQUNBLFVBQUFBLENBQUNBO2dCQUNOQSxNQUFNQSxDQUFDQSxLQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxHQUFHQSxFQUFFQSxNQUFNQSxFQUFFQSxRQUFRQSxDQUFDQSxDQUFDQTtZQUM3Q0EsQ0FBQ0EsQ0FBQ0E7aUJBQ0RBLElBQUlBLENBQUNBLFVBQUFBLENBQUNBO2dCQUNOQSxLQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtnQkFDakJBLFdBQVdBLEVBQUVBLENBQUNBO1lBQ2ZBLENBQUNBLENBQUNBO2lCQUNEQSxLQUFLQSxDQUFDQSxVQUFBQSxHQUFHQTtnQkFDVEEsRUFBRUEsQ0FBQUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsTUFBTUEsQ0FBQ0E7b0JBQ1hBLEtBQUlBLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBO2dCQUNmQSxXQUFXQSxFQUFFQSxDQUFDQTtZQUNmQSxDQUFDQSxDQUFDQSxDQUFBQTtRQUNIQSxDQUFDQTtRQUVNSixpQ0FBV0EsR0FBbEJBLFVBQW1CQSxHQUFVQSxFQUFFQSxNQUFjQSxFQUFFQSxRQUFnQkE7WUFDOURLLEVBQUVBLENBQUFBLENBQUNBLENBQUNBLENBQUNBLE1BQU1BLENBQUNBO2dCQUNYQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxXQUFXQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUNoQ0EsSUFBSUE7Z0JBQ0hBLE1BQU1BLENBQUNBLE9BQU9BLENBQUNBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLEdBQUdBLENBQUNBLFVBQUFBLE1BQU1BLElBQUtBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBLFdBQVdBLENBQUNBLEdBQUdBLENBQUNBLENBQUFBLENBQUFBLENBQUNBLENBQUNBLENBQUNBLENBQUFBO1FBQ2xGQSxDQUFDQTtRQUVNTCxtQ0FBYUEsR0FBcEJBLFVBQXFCQSxHQUFVQSxFQUFFQSxNQUFjQSxFQUFFQSxRQUFnQkE7WUFDaEVNLEVBQUVBLENBQUFBLENBQUNBLENBQUNBLENBQUNBLE1BQU1BLENBQUNBO2dCQUNYQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxhQUFhQSxDQUFDQSxHQUFHQSxFQUFFQSxRQUFRQSxDQUFDQSxDQUFDQTtZQUM1Q0EsSUFBSUE7Z0JBQ0pBLE1BQU1BLENBQUNBLE9BQU9BLENBQUNBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLEdBQUdBLENBQUNBLFVBQUFBLE1BQU1BLElBQUtBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBLGFBQWFBLENBQUNBLEdBQUdBLEVBQUVBLFFBQVFBLENBQUNBLENBQUFBLENBQUFBLENBQUNBLENBQUNBLENBQUNBLENBQUFBO1FBQzdGQSxDQUFDQTtRQUVNTixpQ0FBV0EsR0FBbEJBLFVBQW1CQSxHQUFVQSxFQUFFQSxNQUFjQSxFQUFFQSxRQUFnQkE7WUFDOURPLEVBQUVBLENBQUFBLENBQUNBLENBQUNBLENBQUNBLE1BQU1BLENBQUNBO2dCQUNYQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxXQUFXQSxDQUFDQSxHQUFHQSxFQUFFQSxRQUFRQSxDQUFDQSxDQUFDQTtZQUMxQ0EsSUFBSUE7Z0JBQ0hBLE1BQU1BLENBQUNBLE9BQU9BLENBQUNBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLEdBQUdBLENBQUNBLFVBQUFBLE1BQU1BLElBQUtBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBLFdBQVdBLENBQUNBLEdBQUdBLEVBQUVBLFFBQVFBLENBQUNBLENBQUFBLENBQUFBLENBQUNBLENBQUNBLENBQUNBLENBQUFBO1FBQzVGQSxDQUFDQTtRQUVNUCw4QkFBUUEsR0FBZkEsVUFBZ0JBLEdBQVVBLEVBQUVBLE1BQWNBLEVBQUVBLFFBQWdCQTtZQUMzRFEsRUFBRUEsQ0FBQUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsTUFBTUEsQ0FBQ0E7Z0JBQ1hBLE1BQU1BLENBQUNBLFFBQVFBLENBQUNBLEdBQUdBLEVBQUVBLFFBQVFBLENBQUNBLENBQUNBO1lBQ2hDQSxJQUFJQTtnQkFDSEEsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsVUFBQUEsTUFBTUE7b0JBQzFCQSxNQUFNQSxDQUFDQSxRQUFRQSxDQUFDQSxHQUFHQSxFQUFFQSxRQUFRQSxDQUFDQSxDQUFDQTtnQkFDaENBLENBQUNBLENBQUNBLENBQUFBO1FBQ0pBLENBQUNBO1FBRU9SLGtDQUFZQSxHQUFwQkEsVUFBcUJBLEtBQXFCQTtZQUN6Q1MsSUFBSUEsSUFBSUEsR0FBR0EsTUFBTUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsS0FBS0EsQ0FBQ0EsR0FBR0EsRUFBRUEsR0FBR0EsTUFBTUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFFdEZBLEVBQUVBLENBQUFBLENBQUNBLENBQUNBLENBQUNBLEtBQUtBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBLE9BQU9BLENBQUNBLElBQUlBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEtBQUtBLElBQUlBLENBQUNBO2dCQUM3REEsTUFBTUEsQ0FBQ0E7WUFFUkEsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsSUFBSUEsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFDeEJBLENBQUNBO1FBRU9ULDRCQUFNQSxHQUFkQSxVQUFlQSxHQUFVQTtZQUN4QlUsTUFBTUEsQ0FBQ0EsWUFBWUEsR0FBR0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7WUFDN0JBLE1BQU1BLENBQUNBLFFBQVFBLENBQUNBLElBQUlBLEdBQUdBLEdBQUdBLENBQUNBO1lBQzNCQSxNQUFNQSxDQUFDQSxZQUFZQSxHQUFHQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUVuREEsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDeEJBLENBQUNBO1FBRU9WLDRCQUFNQSxHQUFkQTtZQUNDVyxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxHQUFHQSxFQUFFQSxJQUFJQSxFQUFFQSxDQUFDQSxDQUFBQTtRQUN0Q0EsQ0FBQ0E7UUFDRlgsa0JBQUNBO0lBQURBLENBNUdBLEFBNEdDQSxJQUFBO0lBNUdEO2lDQTRHQyxDQUFBIiwiZmlsZSI6InJvdXRlci9yb3V0ZXN0YXRpYy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSb3V0ZXIgZnJvbSAnLi9yb3V0ZXInXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSb3V0ZVN0YXRpYyB7XHJcblx0XHJcblx0cHJpdmF0ZSByb3V0ZXJzOiBBcnJheTxSb3V0ZXI+ID0gW107XHJcblx0cHJpdmF0ZSBoaXN0b3J5OiBBcnJheTxzdHJpbmc+ID0gW107XHJcblx0cHJpdmF0ZSByb3V0aW5nOiBQcm9taXNlPGFueT4gPSBQcm9taXNlLnJlc29sdmUoJycpO1xyXG5cdFxyXG5cdGNvbnN0cnVjdG9yKCkge1xyXG5cdFx0d2luZG93Lm9uaGFzaGNoYW5nZSA9IHRoaXMub25IYXNoY2hhbmdlLmJpbmQodGhpcyk7XHJcblx0XHR0aGlzLm9uSGFzaGNoYW5nZSh1bmRlZmluZWQpO1xyXG5cdH1cclxuXHRcclxuXHRwdWJsaWMgYWRkUm91dGVyKHJvdXRlcjpSb3V0ZXIpOiB2b2lkIHtcclxuXHRcdCh0aGlzLnJvdXRpbmcgfHwgUHJvbWlzZS5yZXNvbHZlKCcnKSkudGhlbihfPT57XHJcblx0XHRcdHRoaXMucm91dGVycy5wdXNoKHJvdXRlcik7XHJcblx0XHR9KVxyXG5cdH1cclxuXHRcclxuXHRwdWJsaWMgcmVtb3ZlUm91dGVyKHJvdXRlcjpSb3V0ZXIpOiB2b2lkIHtcclxuXHRcdHRoaXMucm91dGVycy5zcGxpY2UodGhpcy5yb3V0ZXJzLmluZGV4T2Yocm91dGVyKSwgMSk7XHJcblx0fVxyXG5cdFxyXG5cdHB1YmxpYyByb3V0ZSh1cmw6c3RyaW5nLCBleHRlcm46Ym9vbGVhbiwgcm91dGVyPzpSb3V0ZXIsIHZpZXdOYW1lPzpzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG5cdFx0XHJcblx0XHRsZXQgZW5kX3JvdXRpbmc6IEZ1bmN0aW9uO1xyXG5cdFx0XHJcblx0XHRyZXR1cm4gdGhpcy5yb3V0aW5nXHJcblx0XHQudGhlbihfPT4ge1xyXG5cdFx0XHR0aGlzLnJvdXRpbmcgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblx0XHRcdFx0ZW5kX3JvdXRpbmcgPSByZXNvbHZlO1xyXG5cdFx0XHR9KVx0XHRcdFxyXG5cdFx0fSlcclxuXHRcdC50aGVuKF89PntcclxuXHRcdFx0cmV0dXJuIHRoaXMuYmVmb3JlUm91dGUodXJsLCByb3V0ZXIsIHZpZXdOYW1lKVxyXG5cdFx0fSlcclxuXHRcdC50aGVuKF89PntcclxuXHRcdFx0cmV0dXJuIHRoaXMuY2FuRGVhY3RpdmF0ZSh1cmwsIHJvdXRlciwgdmlld05hbWUpXHJcblx0XHR9XHJcblx0XHQsdXJsPT57IC8vY2FsbGVkIHdpdGggcmVkaXJlY3QgdXJsLCBpZiBiZWZvcmVSb3V0ZSByZXR1cm5zIGFuIHJlamVjdGVkIFByb21pc2VcclxuXHRcdFx0ZW5kX3JvdXRpbmcoKTtcclxuXHRcdFx0dGhpcy5yb3V0ZSh1cmwsIGV4dGVybiwgcm91dGVyLCB2aWV3TmFtZSk7XHJcblx0XHR9KVxyXG5cdFx0LnRoZW4oXz0+IHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuY2FuQWN0aXZhdGUodXJsLCByb3V0ZXIsIHZpZXdOYW1lKTtcclxuXHRcdH0pXHJcblx0XHQudGhlbihfPT57XHJcblx0XHRcdHJldHVybiB0aGlzLmFjdGl2YXRlKHVybCwgcm91dGVyLCB2aWV3TmFtZSk7XHJcblx0XHR9KVxyXG5cdFx0LnRoZW4oXz0+e1xyXG5cdFx0XHR0aGlzLnNldFVybCh1cmwpO1xyXG5cdFx0XHRlbmRfcm91dGluZygpO1xyXG5cdFx0fSlcclxuXHRcdC5jYXRjaCh1cmw9PiB7XHJcblx0XHRcdGlmKCEhZXh0ZXJuKVxyXG5cdFx0XHRcdHRoaXMuZ29CYWNrKCk7XHJcblx0XHRcdGVuZF9yb3V0aW5nKCk7XHJcblx0XHR9KVxyXG5cdH1cclxuXHRcclxuXHRwdWJsaWMgYmVmb3JlUm91dGUodXJsOnN0cmluZywgcm91dGVyPzpSb3V0ZXIsIHZpZXdOYW1lPzpzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG5cdFx0aWYoISFyb3V0ZXIpXHJcblx0XHRcdHJldHVybiByb3V0ZXIuYmVmb3JlUm91dGUodXJsKTtcclxuXHRcdGVsc2VcclxuXHRcdFx0cmV0dXJuIFByb21pc2UuYWxsKHRoaXMucm91dGVycy5tYXAocm91dGVyID0+IHtyZXR1cm4gcm91dGVyLmJlZm9yZVJvdXRlKHVybCl9KSlcclxuXHR9XHJcblx0XHJcblx0cHVibGljIGNhbkRlYWN0aXZhdGUodXJsOnN0cmluZywgcm91dGVyPzpSb3V0ZXIsIHZpZXdOYW1lPzpzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG5cdFx0aWYoISFyb3V0ZXIpXHJcblx0XHRcdHJldHVybiByb3V0ZXIuY2FuRGVhY3RpdmF0ZSh1cmwsIHZpZXdOYW1lKTtcclxuXHRcdGVsc2VcclxuXHRcdHJldHVybiBQcm9taXNlLmFsbCh0aGlzLnJvdXRlcnMubWFwKHJvdXRlciA9PiB7cmV0dXJuIHJvdXRlci5jYW5EZWFjdGl2YXRlKHVybCwgdmlld05hbWUpfSkpXHJcblx0fVxyXG5cdFxyXG5cdHB1YmxpYyBjYW5BY3RpdmF0ZSh1cmw6c3RyaW5nLCByb3V0ZXI/OlJvdXRlciwgdmlld05hbWU/OnN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcblx0XHRpZighIXJvdXRlcilcclxuXHRcdFx0cmV0dXJuIHJvdXRlci5jYW5BY3RpdmF0ZSh1cmwsIHZpZXdOYW1lKTtcclxuXHRcdGVsc2VcclxuXHRcdFx0cmV0dXJuIFByb21pc2UuYWxsKHRoaXMucm91dGVycy5tYXAocm91dGVyID0+IHtyZXR1cm4gcm91dGVyLmNhbkFjdGl2YXRlKHVybCwgdmlld05hbWUpfSkpXHJcblx0fVxyXG5cdFxyXG5cdHB1YmxpYyBhY3RpdmF0ZSh1cmw6c3RyaW5nLCByb3V0ZXI/OlJvdXRlciwgdmlld05hbWU/OnN0cmluZyk6IHZvaWQge1xyXG5cdFx0aWYoISFyb3V0ZXIpXHJcblx0XHRcdHJvdXRlci5hY3RpdmF0ZSh1cmwsIHZpZXdOYW1lKTtcclxuXHRcdGVsc2UgXHJcblx0XHRcdHRoaXMucm91dGVycy5mb3JFYWNoKHJvdXRlciA9PiB7XHJcblx0XHRcdFx0cm91dGVyLmFjdGl2YXRlKHVybCwgdmlld05hbWUpO1xyXG5cdFx0XHR9KVxyXG5cdH1cclxuXHRcclxuXHRwcml2YXRlIG9uSGFzaGNoYW5nZShldmVudDpIYXNoQ2hhbmdlRXZlbnQpOiB2b2lkIHtcclxuXHRcdGxldCBoYXNoID0gd2luZG93LmxvY2F0aW9uLmhhc2gubGVuZ3RoID09PSAwID8gJycgOiB3aW5kb3cubG9jYXRpb24uaGFzaC5zdWJzdHJpbmcoMSk7XHJcblx0XHRcclxuXHRcdGlmKCEhZXZlbnQgJiYgKGV2ZW50Lm5ld1VSTC5tYXRjaCgvIyguKikvKSB8fCBbXSlbMV0gPT09IGhhc2gpXHJcblx0XHRcdHJldHVybjtcclxuXHRcdFx0XHJcblx0XHR0aGlzLnJvdXRlKGhhc2gsIHRydWUpO1xyXG5cdH1cclxuXHRcclxuXHRwcml2YXRlIHNldFVybCh1cmw6c3RyaW5nKTogdm9pZCB7XHJcblx0XHR3aW5kb3cub25oYXNoY2hhbmdlID0gdm9pZCAwO1xyXG5cdFx0d2luZG93LmxvY2F0aW9uLmhhc2ggPSB1cmw7XHJcblx0XHR3aW5kb3cub25oYXNoY2hhbmdlID0gdGhpcy5vbkhhc2hjaGFuZ2UuYmluZCh0aGlzKTtcclxuXHRcdFxyXG5cdFx0dGhpcy5oaXN0b3J5LnB1c2godXJsKTtcclxuXHR9XHJcblx0XHJcblx0cHJpdmF0ZSBnb0JhY2soKTogdm9pZCB7XHJcblx0XHR0aGlzLnNldFVybCh0aGlzLmhpc3RvcnkucG9wKCkgfHwgJycpXHJcblx0fVxyXG59Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9