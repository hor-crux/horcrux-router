define(["require", "exports"], function (require, exports) {
    var RouteStatic = (function () {
        function RouteStatic() {
            this.routers = [];
            this.history = [];
            this.routing = Promise.resolve('');
            window.onhashchange = this.onHashchange.bind(this);
            this.onHashchange(undefined);
        }
        RouteStatic.prototype.addRouter = function (router) {
            var _this = this;
            this.routing.then(function (_) {
                _this.routers.push(router);
            });
        };
        RouteStatic.prototype.removeRouter = function (router) {
            this.routers.splice(this.routers.indexOf(router), 1);
        };
        RouteStatic.prototype.startRouting = function () {
            var _this = this;
            this.routing = new Promise(function (resolve, reject) {
                _this.resolve_routing = resolve;
            });
        };
        RouteStatic.prototype.stopRouting = function () {
            this.resolve_routing();
        };
        RouteStatic.prototype.route = function (url, extern, router, viewName) {
            var _this = this;
            this.startRouting();
            return this.routing
                .then(function (_) {
                return _this.beforeRoute(url, router, viewName); //may reject, if redirect.
            })
                .then(function (_) {
                return _this.canDeactivate(url, router, viewName);
            }, function (url) {
                _this.stopRouting();
                _this.route(url, extern, router, viewName);
                return Promise.reject("ABORT");
            })
                .then(function (_) {
                return _this.canActivate(url, router, viewName);
            })
                .then(function (_) {
                return _this.activate(url, router, viewName);
            })
                .then(function (_) {
                _this.setUrl(url);
                _this.stopRouting();
            })
                .catch(function (reason) {
                if (reason === "ABORT") {
                    _this.stopRouting();
                    return;
                }
                else {
                    if (!!extern)
                        _this.goBack();
                    _this.stopRouting();
                }
            });
        };
        RouteStatic.prototype.beforeRoute = function (url, router, viewName) {
            if (!!router)
                return router.beforeRoute(url);
            else
                return Promise.all(this.routers.map(function (router) { return router.beforeRoute(url); }));
        };
        RouteStatic.prototype.canDeactivate = function (url, router, viewName) {
            if (!!router)
                return router.canDeactivate(url, viewName);
            else
                return Promise.all(this.routers.map(function (router) { return router.canDeactivate(url, viewName); }));
        };
        RouteStatic.prototype.canActivate = function (url, router, viewName) {
            if (!!router)
                return router.canActivate(url, viewName);
            else
                return Promise.all(this.routers.map(function (router) { return router.canActivate(url, viewName); }));
        };
        RouteStatic.prototype.activate = function (url, router, viewName) {
            if (!!router)
                router.activate(url, viewName);
            else
                this.routers.forEach(function (router) {
                    router.activate(url, viewName);
                });
        };
        RouteStatic.prototype.onHashchange = function (event) {
            var hash = window.location.hash.length === 0 ? '' : window.location.hash.substring(1);
            if (!!event && (event.newURL.match(/#(.*)/) || [])[1] === hash)
                return;
            this.route(hash, true);
        };
        RouteStatic.prototype.setUrl = function (url) {
            window.onhashchange = void 0;
            window.location.hash = url;
            window.onhashchange = this.onHashchange.bind(this);
            this.history.push(url);
        };
        RouteStatic.prototype.goBack = function () {
            this.setUrl(this.history.pop() || '');
        };
        return RouteStatic;
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = RouteStatic;
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJvdXRlci9yb3V0ZXN0YXRpYy50cyJdLCJuYW1lcyI6WyJSb3V0ZVN0YXRpYyIsIlJvdXRlU3RhdGljLmNvbnN0cnVjdG9yIiwiUm91dGVTdGF0aWMuYWRkUm91dGVyIiwiUm91dGVTdGF0aWMucmVtb3ZlUm91dGVyIiwiUm91dGVTdGF0aWMuc3RhcnRSb3V0aW5nIiwiUm91dGVTdGF0aWMuc3RvcFJvdXRpbmciLCJSb3V0ZVN0YXRpYy5yb3V0ZSIsIlJvdXRlU3RhdGljLmJlZm9yZVJvdXRlIiwiUm91dGVTdGF0aWMuY2FuRGVhY3RpdmF0ZSIsIlJvdXRlU3RhdGljLmNhbkFjdGl2YXRlIiwiUm91dGVTdGF0aWMuYWN0aXZhdGUiLCJSb3V0ZVN0YXRpYy5vbkhhc2hjaGFuZ2UiLCJSb3V0ZVN0YXRpYy5zZXRVcmwiLCJSb3V0ZVN0YXRpYy5nb0JhY2siXSwibWFwcGluZ3MiOiI7SUFFQTtRQVFDQTtZQU5RQyxZQUFPQSxHQUFrQkEsRUFBRUEsQ0FBQ0E7WUFDNUJBLFlBQU9BLEdBQWtCQSxFQUFFQSxDQUFDQTtZQUU1QkEsWUFBT0EsR0FBaUJBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLEVBQUVBLENBQUNBLENBQUNBO1lBSW5EQSxNQUFNQSxDQUFDQSxZQUFZQSxHQUFHQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUNuREEsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0E7UUFDOUJBLENBQUNBO1FBRU1ELCtCQUFTQSxHQUFoQkEsVUFBaUJBLE1BQWFBO1lBQTlCRSxpQkFJQ0E7WUFIQUEsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBQUEsQ0FBQ0E7Z0JBQ2xCQSxLQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtZQUMzQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQUE7UUFDSEEsQ0FBQ0E7UUFFTUYsa0NB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QUFDQSxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQSxPQUFPQSxDQUFDQSxJQUFJQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxLQUFLQSxJQUFJQSxDQUFDQTtnQkFDN0RBLE1BQU1BLENBQUNBO1lBRVJBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLElBQUlBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBO1FBQ3hCQSxDQUFDQTtRQUVPWCw0QkFBTUEsR0FBZEEsVUFBZUEsR0FBVUE7WUFDeEJZLE1BQU1BLENBQUNBLFlBQVlBLEdBQUdBLEtBQUtBLENBQUNBLENBQUNBO1lBQzdCQSxNQUFNQSxDQUFDQSxRQUFRQSxDQUFDQSxJQUFJQSxHQUFHQSxHQUFHQSxDQUFDQTtZQUMzQkEsTUFBTUEsQ0FBQ0EsWUFBWUEsR0FBR0EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7WUFFbkRBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1FBQ3hCQSxDQUFDQTtRQUVPWiw0QkFBTUEsR0FBZEE7WUFDQ2EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsR0FBR0EsRUFBRUEsSUFBSUEsRUFBRUEsQ0FBQ0EsQ0FBQUE7UUFDdENBLENBQUNBO1FBQ0ZiLGtCQUFDQTtJQUFEQSxDQTFIQSxBQTBIQ0EsSUFBQTtJQTFIRDtpQ0EwSEMsQ0FBQSIsImZpbGUiOiJyb3V0ZXIvcm91dGVzdGF0aWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUm91dGVyIGZyb20gJy4vcm91dGVyJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUm91dGVTdGF0aWMge1xyXG5cdFxyXG5cdHByaXZhdGUgcm91dGVyczogQXJyYXk8Um91dGVyPiA9IFtdO1xyXG5cdHByaXZhdGUgaGlzdG9yeTogQXJyYXk8c3RyaW5nPiA9IFtdO1xyXG5cdFxyXG5cdHByaXZhdGUgcm91dGluZzogUHJvbWlzZTxhbnk+ID0gUHJvbWlzZS5yZXNvbHZlKCcnKTtcclxuXHRwcml2YXRlIHJlc29sdmVfcm91dGluZzogRnVuY3Rpb247XHJcblx0XHJcblx0Y29uc3RydWN0b3IoKSB7XHJcblx0XHR3aW5kb3cub25oYXNoY2hhbmdlID0gdGhpcy5vbkhhc2hjaGFuZ2UuYmluZCh0aGlzKTtcclxuXHRcdHRoaXMub25IYXNoY2hhbmdlKHVuZGVmaW5lZCk7XHJcblx0fVxyXG5cdFxyXG5cdHB1YmxpYyBhZGRSb3V0ZXIocm91dGVyOlJvdXRlcik6IHZvaWQge1xyXG5cdFx0dGhpcy5yb3V0aW5nLnRoZW4oXz0+e1xyXG5cdFx0XHR0aGlzLnJvdXRlcnMucHVzaChyb3V0ZXIpO1xyXG5cdFx0fSlcclxuXHR9XHJcblx0XHJcblx0cHVibGljIHJlbW92ZVJvdXRlcihyb3V0ZXI6Um91dGVyKTogdm9pZCB7XHJcblx0XHR0aGlzLnJvdXRlcnMuc3BsaWNlKHRoaXMucm91dGVycy5pbmRleE9mKHJvdXRlciksIDEpO1xyXG5cdH1cclxuXHRcclxuXHRwcm90ZWN0ZWQgc3RhcnRSb3V0aW5nKCk6IHZvaWQge1xyXG5cdFx0dGhpcy5yb3V0aW5nID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cdFx0XHR0aGlzLnJlc29sdmVfcm91dGluZyA9IHJlc29sdmU7XHJcblx0XHR9KVxyXG5cdH1cclxuXHRcclxuXHRwcm90ZWN0ZWQgc3RvcFJvdXRpbmcoKTogdm9pZCB7XHJcblx0XHR0aGlzLnJlc29sdmVfcm91dGluZygpO1xyXG5cdH1cclxuXHRcclxuXHRwdWJsaWMgcm91dGUodXJsOnN0cmluZywgZXh0ZXJuOmJvb2xlYW4sIHJvdXRlcj86Um91dGVyLCB2aWV3TmFtZT86c3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuXHRcdFxyXG5cdFx0dGhpcy5zdGFydFJvdXRpbmcoKTtcclxuXHRcdFxyXG5cdFx0cmV0dXJuIHRoaXMucm91dGluZ1xyXG5cdFx0LnRoZW4oXz0+e1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5iZWZvcmVSb3V0ZSh1cmwsIHJvdXRlciwgdmlld05hbWUpIC8vbWF5IHJlamVjdCwgaWYgcmVkaXJlY3QuXHJcblx0XHR9KVxyXG5cdFx0LnRoZW4oXz0+e1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5jYW5EZWFjdGl2YXRlKHVybCwgcm91dGVyLCB2aWV3TmFtZSlcclxuXHRcdH1cclxuXHRcdCx1cmw9PnsgLy9jYWxsZWQgd2l0aCByZWRpcmVjdCB1cmwsIGlmIGJlZm9yZVJvdXRlIHJldHVybnMgYW4gcmVqZWN0ZWQgUHJvbWlzZVxyXG5cdFx0XHR0aGlzLnN0b3BSb3V0aW5nKCk7XHJcblx0XHRcdHRoaXMucm91dGUodXJsLCBleHRlcm4sIHJvdXRlciwgdmlld05hbWUpO1xyXG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoXCJBQk9SVFwiKTtcclxuXHRcdH0pXHJcblx0XHQudGhlbihfPT4ge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5jYW5BY3RpdmF0ZSh1cmwsIHJvdXRlciwgdmlld05hbWUpO1xyXG5cdFx0fSlcclxuXHRcdC50aGVuKF89PntcclxuXHRcdFx0cmV0dXJuIHRoaXMuYWN0aXZhdGUodXJsLCByb3V0ZXIsIHZpZXdOYW1lKTtcclxuXHRcdH0pXHJcblx0XHQudGhlbihfPT57XHJcblx0XHRcdHRoaXMuc2V0VXJsKHVybCk7XHJcblx0XHRcdHRoaXMuc3RvcFJvdXRpbmcoKTtcclxuXHRcdH0pXHJcblx0XHQuY2F0Y2gocmVhc29uPT4ge1xyXG5cdFx0XHRpZihyZWFzb249PT1cIkFCT1JUXCIpIHtcclxuXHRcdFx0XHR0aGlzLnN0b3BSb3V0aW5nKCk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2Uge1xyXG5cdFx0XHRcdGlmKCEhZXh0ZXJuKVxyXG5cdFx0XHRcdFx0dGhpcy5nb0JhY2soKTtcclxuXHRcdFx0XHR0aGlzLnN0b3BSb3V0aW5nKCk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH1cclxuXHRcclxuXHRwdWJsaWMgYmVmb3JlUm91dGUodXJsOnN0cmluZywgcm91dGVyPzpSb3V0ZXIsIHZpZXdOYW1lPzpzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG5cdFx0aWYoISFyb3V0ZXIpXHJcblx0XHRcdHJldHVybiByb3V0ZXIuYmVmb3JlUm91dGUodXJsKTtcclxuXHRcdGVsc2VcclxuXHRcdFx0cmV0dXJuIFByb21pc2UuYWxsKHRoaXMucm91dGVycy5tYXAocm91dGVyID0+IHtyZXR1cm4gcm91dGVyLmJlZm9yZVJvdXRlKHVybCl9KSlcclxuXHR9XHJcblx0XHJcblx0cHVibGljIGNhbkRlYWN0aXZhdGUodXJsOnN0cmluZywgcm91dGVyPzpSb3V0ZXIsIHZpZXdOYW1lPzpzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG5cdFx0aWYoISFyb3V0ZXIpXHJcblx0XHRcdHJldHVybiByb3V0ZXIuY2FuRGVhY3RpdmF0ZSh1cmwsIHZpZXdOYW1lKTtcclxuXHRcdGVsc2VcclxuXHRcdHJldHVybiBQcm9taXNlLmFsbCh0aGlzLnJvdXRlcnMubWFwKHJvdXRlciA9PiB7cmV0dXJuIHJvdXRlci5jYW5EZWFjdGl2YXRlKHVybCwgdmlld05hbWUpfSkpXHJcblx0fVxyXG5cdFxyXG5cdHB1YmxpYyBjYW5BY3RpdmF0ZSh1cmw6c3RyaW5nLCByb3V0ZXI/OlJvdXRlciwgdmlld05hbWU/OnN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcblx0XHRpZighIXJvdXRlcilcclxuXHRcdFx0cmV0dXJuIHJvdXRlci5jYW5BY3RpdmF0ZSh1cmwsIHZpZXdOYW1lKTtcclxuXHRcdGVsc2VcclxuXHRcdFx0cmV0dXJuIFByb21pc2UuYWxsKHRoaXMucm91dGVycy5tYXAocm91dGVyID0+IHtyZXR1cm4gcm91dGVyLmNhbkFjdGl2YXRlKHVybCwgdmlld05hbWUpfSkpXHJcblx0fVxyXG5cdFxyXG5cdHB1YmxpYyBhY3RpdmF0ZSh1cmw6c3RyaW5nLCByb3V0ZXI/OlJvdXRlciwgdmlld05hbWU/OnN0cmluZyk6IHZvaWQge1xyXG5cdFx0aWYoISFyb3V0ZXIpXHJcblx0XHRcdHJvdXRlci5hY3RpdmF0ZSh1cmwsIHZpZXdOYW1lKTtcclxuXHRcdGVsc2UgXHJcblx0XHRcdHRoaXMucm91dGVycy5mb3JFYWNoKHJvdXRlciA9PiB7XHJcblx0XHRcdFx0cm91dGVyLmFjdGl2YXRlKHVybCwgdmlld05hbWUpO1xyXG5cdFx0XHR9KVxyXG5cdH1cclxuXHRcclxuXHRwcml2YXRlIG9uSGFzaGNoYW5nZShldmVudDpIYXNoQ2hhbmdlRXZlbnQpOiB2b2lkIHtcclxuXHRcdGxldCBoYXNoID0gd2luZG93LmxvY2F0aW9uLmhhc2gubGVuZ3RoID09PSAwID8gJycgOiB3aW5kb3cubG9jYXRpb24uaGFzaC5zdWJzdHJpbmcoMSk7XHJcblx0XHRcclxuXHRcdGlmKCEhZXZlbnQgJiYgKGV2ZW50Lm5ld1VSTC5tYXRjaCgvIyguKikvKSB8fCBbXSlbMV0gPT09IGhhc2gpXHJcblx0XHRcdHJldHVybjtcclxuXHRcdFx0XHJcblx0XHR0aGlzLnJvdXRlKGhhc2gsIHRydWUpO1xyXG5cdH1cclxuXHRcclxuXHRwcml2YXRlIHNldFVybCh1cmw6c3RyaW5nKTogdm9pZCB7XHJcblx0XHR3aW5kb3cub25oYXNoY2hhbmdlID0gdm9pZCAwO1xyXG5cdFx0d2luZG93LmxvY2F0aW9uLmhhc2ggPSB1cmw7XHJcblx0XHR3aW5kb3cub25oYXNoY2hhbmdlID0gdGhpcy5vbkhhc2hjaGFuZ2UuYmluZCh0aGlzKTtcclxuXHRcdFxyXG5cdFx0dGhpcy5oaXN0b3J5LnB1c2godXJsKTtcclxuXHR9XHJcblx0XHJcblx0cHJpdmF0ZSBnb0JhY2soKTogdm9pZCB7XHJcblx0XHR0aGlzLnNldFVybCh0aGlzLmhpc3RvcnkucG9wKCkgfHwgJycpXHJcblx0fVxyXG59Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9