define(["require", "exports"], function (require, exports) {
    var RouteStatic = (function () {
        function RouteStatic() {
            this.routers = [];
            this.history = [];
            window.onhashchange = this.onHashchange.bind(this);
            this.onHashchange(undefined);
        }
        RouteStatic.prototype.addRouter = function (router) {
            var _this = this;
            (this.routing || Promise.resolve('')).then(function (_) {
                _this.routers.push(router);
            });
        };
        RouteStatic.prototype.removeRouter = function (router) {
            this.routers.splice(this.routers.indexOf(router), 1);
        };
        RouteStatic.prototype.route = function (url, extern, router, viewName) {
            var _this = this;
            var end_routing;
            this.routing = new Promise(function (resolve, reject) {
                end_routing = resolve;
            });
            return Promise.resolve('')
                .then(function (_) {
                return _this.beforeRoute(url, router, viewName);
            })
                .then(function (_) {
                return _this.canDeactivate(url, router, viewName);
            })
                .catch(function (url) {
                end_routing();
                _this.route(url, extern, router, viewName);
            })
                .then(function (_) {
                return _this.canActivate(url, router, viewName);
            })
                .then(function (_) {
                return _this.activate(url, router, viewName);
            })
                .then(function (_) {
                _this.setUrl(url);
                end_routing();
            })
                .catch(function (url) {
                if (!!extern)
                    _this.goBack();
                end_routing();
            });
        };
        RouteStatic.prototype.beforeRoute = function (url, router, viewName) {
            if (!!router)
                return router.beforeRoute(url);
            else
                return Promise.all(this.routers.map(function (router) { return router.beforeRoute(url); }));
        };
        RouteStatic.prototype.canDeactivate = function (url, router, viewName) {
            if (!!router)
                return router.canDeactivate(url, viewName);
            else
                return Promise.all(this.routers.map(function (router) { return router.canDeactivate(url, viewName); }));
        };
        RouteStatic.prototype.canActivate = function (url, router, viewName) {
            if (!!router)
                return router.canActivate(url, viewName);
            else
                return Promise.all(this.routers.map(function (router) { return router.canActivate(url, viewName); }));
        };
        RouteStatic.prototype.activate = function (url, router, viewName) {
            if (!!router)
                router.activate(url, viewName);
            else
                this.routers.forEach(function (router) {
                    router.activate(url, viewName);
                });
        };
        RouteStatic.prototype.onHashchange = function (event) {
            var hash = window.location.hash.length === 0 ? '' : window.location.hash.substring(1);
            if (!!event && (event.newURL.match(/#(.*)/) || [])[1] === hash)
                return;
            this.route(hash, true);
        };
        RouteStatic.prototype.setUrl = function (url) {
            window.onhashchange = void 0;
            window.location.hash = url;
            window.onhashchange = this.onHashchange.bind(this);
            this.history.push(url);
        };
        RouteStatic.prototype.goBack = function () {
            this.setUrl(this.history.pop() || '');
        };
        return RouteStatic;
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = RouteStatic;
});

//# sourceMappingURL=data:application/json;base64,