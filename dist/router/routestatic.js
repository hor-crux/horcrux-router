define(["require", "exports"], function (require, exports) {
    var RouteStatic = (function () {
        function RouteStatic() {
            this.routers = [];
            this.history = [];
            this.routing = Promise.resolve('');
            window.onhashchange = this.onHashchange.bind(this);
            this.onHashchange(undefined);
        }
        RouteStatic.prototype.addRouter = function (router) {
            var _this = this;
            this.routing.then(function (_) {
                _this.routers.push(router);
            });
        };
        RouteStatic.prototype.removeRouter = function (router) {
            this.routers.splice(this.routers.indexOf(router), 1);
        };
        RouteStatic.prototype.startRouting = function () {
            var _this = this;
            this.routing = new Promise(function (resolve, reject) {
                _this.resolve_routing = resolve;
            });
        };
        RouteStatic.prototype.stopRouting = function () {
            (this.resolve_routing || function () { }).call(this);
        };
        RouteStatic.prototype.route = function (url, extern, router, viewName) {
            var _this = this;
            if (this.routers.length === 0 && !router && !viewName) {
                this.stopRouting();
                return;
            }
            return this.routing
                .then(function (_) {
                _this.startRouting();
                return _this.beforeRoute(url, router, viewName); //may reject, if redirect.
            })
                .then(function (_) {
                return _this.canDeactivate(url, router, viewName);
            })
                .then(function (_) {
                return _this.canActivate(url, router, viewName);
            })
                .then(function (_) {
                return _this.activate(url, router, viewName);
            })
                .then(function (_) {
                _this.setUrl(url);
                _this.stopRouting();
            })
                .catch(function (url) {
                _this.stopRouting();
                if (typeof url === "string") {
                    return _this.redirect(url, extern, router, viewName);
                }
            });
        };
        RouteStatic.prototype.redirect = function (url, extern, router, viewName) {
            this.stopRouting();
            //return this.route(url, extern, router, viewName);
            return this.route(url, extern);
        };
        RouteStatic.prototype.beforeRoute = function (url, router, viewName) {
            if (!!router)
                return router.beforeRoute(url);
            else
                return Promise.all(this.routers.map(function (router) { return router.beforeRoute(url); }));
        };
        RouteStatic.prototype.canDeactivate = function (url, router, viewName) {
            if (!!router)
                return router.canDeactivate(url, viewName);
            else
                return Promise.all(this.routers.map(function (router) { return router.canDeactivate(url, viewName); }));
        };
        RouteStatic.prototype.canActivate = function (url, router, viewName) {
            if (!!router)
                return router.canActivate(url, viewName);
            else
                return Promise.all(this.routers.map(function (router) { return router.canActivate(url, viewName); }));
        };
        RouteStatic.prototype.activate = function (url, router, viewName) {
            if (!!router)
                router.activate(url, viewName);
            else
                this.routers.forEach(function (router) {
                    router.activate(url, viewName);
                });
        };
        RouteStatic.prototype.onHashchange = function (event) {
            var hash = window.location.hash.length === 0 ? '' : window.location.hash.substring(1);
            //If called because of hachchangeevent, e.g. user changes the hash directly in the browser, window.location.hash alreday is the new, requested url.
            /*
            if(!!event) {
                if((event.newURL.match(/#(.*)/) || [])[1] === hash)
                    return;
            }
            */
            this.route(hash, true);
        };
        RouteStatic.prototype.setUrl = function (url) {
            window.onhashchange = void 0;
            window.location.hash = url;
            this.history.push(url);
            window.onhashchange = this.onHashchange.bind(this);
        };
        RouteStatic.prototype.goBack = function () {
            this.setUrl(this.history.pop() || '');
        };
        return RouteStatic;
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = RouteStatic;
});

//# sourceMappingURL=data:application/json;base64,